facet_wrap(.~set, ncol=3, scales = "free")+
theme_classic()+
scale_y_continuous(limits = c(0.5,1), expand = c(0.01,0.01))+
theme(axis.text.x = element_text(angle = 90),
strip.background = element_blank(),
axis.line = element_line(linewidth=.5, color="black"),
axis.ticks = element_line(linewidth=.5, color="black"),
axis.ticks.length = unit(1, "mm"))
######################################################用overlap的特征建模
rm(list=ls())
freq = read.csv("final final 5-fold 4_features_selection results.csv")
setwd("F:/RA/第一次投稿/审稿意见/Fig 5/MTXHCQ/MTXHCQ20250319随机抽不放回，多几个评价指标")
setwd("H:/20250330 figure+code/Figure 5/Predicting MTX+HCQ response & Fig. 5i-o")
###################################################### selecting classifier
rm(list=ls())
freq = read.csv("5-fold 4_features_selection results.csv")
names(freq)
freq2 = reshape2::dcast(freq, features ~ f, value.var = "Fold") %>%
arrange(desc(Lasso),desc(RF),desc(RFERF),desc(RFESVM))
features <- freq2$features[freq2$Lasso>1 & freq2$RF>1 & freq2$RFERF>1 & freq2$RFESVM>1]
features
d2 = read.csv("F:/RA/第一次投稿/审稿意见/response machine learning/train和test数据处理/MH dataset 1 for machine learning.csv",row.names = 1)
colnames(d2)[2]="target"
d1 = read.csv("F:/RA/第一次投稿/审稿意见/response machine learning/train和test数据处理/MH dataset 2 for machine learning.csv",row.names = 1)
table(d1$csDMARDs)
df = d1[,-c(1,3,4)]; colnames(df)[1]="target"
names(d1)
yes = df %>% filter(target==1)
no = df %>% filter(target==0)
####################################不放回抽取fold
seed0=c(1,12,123,1234,12345)
set.seed(123);seed1 = sample(1:10000,5)
set.seed(123);seed2 = sample(1:1000,5)
set.seed(1);seed3 = sample(1:10000,5)
set.seed(1);seed4 = sample(1:1000,5)
cv5_sample <- function(data,n){
lapply(c(seed0,seed1,seed2,seed3,seed4), function(seed){
result=NULL
for(i in seed){
set.seed(i)
data = data[!data%in%result$re]
if(length(data) < round(n/5)+2){re = data}else{re = sample(data, round(n/5))}
re = data.frame(re,seed=i)
result = rbind(result, re)
}
return(result)
})
}
# 1. randomly select samples
sample_yes = do.call(rbind, cv5_sample(rownames(yes), nrow(yes)))
sample_no = do.call(rbind,cv5_sample(rownames(no), nrow(no)))
sample = lapply(c(seed0,seed1,seed2,seed3,seed4), function(seed){lapply(seed, function(s){data = c(sample_yes$re[sample_yes$seed==s], sample_no$re[sample_no$seed==s])})})
names(sample) = 1:25
models_list <- list(
"1Logistic Regression" = "glm",
"2ridge"="glmnet",
"3lasso"="glmnet",
"4KNN" = "knn",
"5SVM" = "svmRadial",
"6Decision Tree" = "rpart",
"7Random Forest" = "rf",
"8XGBoost" = "xgbTree",
"9LightGBM" = "gbm"
)
excluded_cli = colnames(df)[6:ncol(df)]
results=NULL
i=16
for (i in 16:20) {
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
external_selected = d2[,c(features, "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
}
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
external_selected = d2[,c(features, "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
for (i in 16:20) {
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
external_selected = d2[,c(features, "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
}
trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
model_method
models_list <- list(
"1Logistic Regression" = "glm",
"2ridge"="glmnet",
"3lasso"="glmnet",
"4KNN" = "knn",
"5SVM" = "svmRadial",
"6Decision Tree" = "rpart",
"7Random Forest" = "rf",
"8XGBoost" = "xgbTree",
"9LightGBM" = "gbm"
)
excluded_cli = colnames(df)[6:ncol(df)]
results=NULL
i=16
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
###################################################### selecting classifier
rm(list=ls())
freq = read.csv("5-fold 4_features_selection results.csv")
names(freq)
freq2 = reshape2::dcast(freq, features ~ f, value.var = "Fold") %>%
arrange(desc(Lasso),desc(RF),desc(RFERF),desc(RFESVM))
features <- freq2$features[freq2$Lasso>1 & freq2$RF>1 & freq2$RFERF>1 & freq2$RFESVM>1]
features
d2 = read.csv("F:/RA/第一次投稿/审稿意见/response machine learning/train和test数据处理/MH dataset 1 for machine learning.csv",row.names = 1)
colnames(d2)[2]="target"
d1 = read.csv("F:/RA/第一次投稿/审稿意见/response machine learning/train和test数据处理/MH dataset 2 for machine learning.csv",row.names = 1)
table(d1$csDMARDs)
df = d1[,-c(1,3,4)]; colnames(df)[1]="target"
names(d1)
yes = df %>% filter(target==1)
no = df %>% filter(target==0)
####################################不放回抽取fold
seed0=c(1,12,123,1234,12345)
set.seed(123);seed1 = sample(1:10000,5)
set.seed(123);seed2 = sample(1:1000,5)
set.seed(1);seed3 = sample(1:10000,5)
set.seed(1);seed4 = sample(1:1000,5)
cv5_sample <- function(data,n){
lapply(c(seed0,seed1,seed2,seed3,seed4), function(seed){
result=NULL
for(i in seed){
set.seed(i)
data = data[!data%in%result$re]
if(length(data) < round(n/5)+2){re = data}else{re = sample(data, round(n/5))}
re = data.frame(re,seed=i)
result = rbind(result, re)
}
return(result)
})
}
# 1. randomly select samples
sample_yes = do.call(rbind, cv5_sample(rownames(yes), nrow(yes)))
sample_no = do.call(rbind,cv5_sample(rownames(no), nrow(no)))
sample = lapply(c(seed0,seed1,seed2,seed3,seed4), function(seed){lapply(seed, function(s){data = c(sample_yes$re[sample_yes$seed==s], sample_no$re[sample_no$seed==s])})})
names(sample) = 1:25
models_list <- list(
"1Logistic Regression" = "glm",
"2ridge"="glmnet",
"3lasso"="glmnet",
"4KNN" = "knn",
"5SVM" = "svmRadial",
"6Decision Tree" = "rpart",
"7Random Forest" = "rf",
"8XGBoost" = "xgbTree",
"9LightGBM" = "gbm"
)
excluded_cli = colnames(df)[6:ncol(df)]
results=NULL
i=16
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
external_selected = d2[,c(features, "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
if(model_name=="3lasso"){
set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{set.seed(1); trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
excluded_cli = colnames(df)[6:ncol(df)]
results=NULL
i=16
for (i in 16:20) {
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
# 单独临床指标
training_cli <- data[, c(features[features %in% c("TJC","DAS28.CRP.HM","SJC","CRP")], "target")]
validation_cli <- validation[, c(features[features %in% c("TJC","DAS28.CRP.HM","SJC","CRP")], "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
trained_cli <- train(target ~ ., data = training_cli, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
}else{
if(model_name=="3lasso"){
trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
trained_cli <- train(target ~ ., data = training_cli, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3));
trained_cli <- train(target ~ ., data = training_cli, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
# calculate auc
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
}
write.csv(results,"selecting classifier.csv", row.names = F)
results = read.csv("selecting classifier.csv")
table(results$predictions_type)
performance = NULL
results$method = paste(results$Fold, results$features,results$Model, sep="_")
table(results$method)
table(results$predictions)
for(i in unique(results$method)){for(n in c("training","testing")){
d = results %>% filter(method==i,predictions_type==n); table(d$method)
if(nrow(d)==0){next}else{
auc <- roc(as.numeric(d$Actual),as.numeric(d$predictions))[["auc"]]
m <- confusionMatrix(as.factor(d$predictions), as.factor(d$Actual))
re = cbind(as.data.frame(t(m[["overall"]])), as.data.frame(t(m[["byClass"]]))) %>% mutate(method=i, set=n, auc=auc)
performance = rbind(performance, re)
}
}
}
table(results$predictions)
perf = performance
perf$model = gsub(".*\\_","",perf$method)
perf$Fold = gsub("\\_.*","",perf$method)
names(perf)
write.csv(performance,"performance of 9 classifiers.csv", row.names = F)
########################################################
perf = data.table::fread("performance of 9 classifiers.csv")
perf$model = gsub(".*\\_","",perf$method)
perf$Fold = gsub("\\_.*","",perf$method)
names(perf)
p = reshape2::melt(perf,id.vars=c(19,20,22,23),
measure.vars=c("auc","Accuracy","F1","Sensitivity","Specificity","Pos Pred Value","Neg Pred Value"))
names(p)
p2 = p %>% group_by(model,set,variable) %>%
summarise(mean = mean(value), sd = sd(value))
ggplot(p2, aes(variable, mean, color=model, group=model, shape=model, lintype=model))+
geom_line()+
geom_point()+
scale_shape_manual(values = c(4,5,15,16,17,9,8,26,29,13,14))+
scale_color_manual(values = c("#f9a363","#3b4992","#3d7dae","#af322f","#8b7ec0","#8a4198","#725663","green4","black"))+
scale_linetype_manual(values = c(1,2,2,1,2,2,1,1,1))+
facet_wrap(.~set, ncol=3, scales = "free")+
theme_classic()+
scale_y_continuous(limits = c(0.5,1), expand = c(0.01,0.01))+
theme(axis.text.x = element_text(angle = 90),
strip.background = element_blank(),
axis.line = element_line(linewidth=.5, color="black"),
axis.ticks = element_line(linewidth=.5, color="black"),
axis.ticks.length = unit(1, "mm"))
results=NULL
i=16
for (i in 16:20) {
validation = df[rownames(df) %in% sample[[i]][[1]],]  # 每个fold做验证集
training = df[!(rownames(df) %in% sample[[i]][[1]]),] # k-1 folds作为训练集
################################ 复制样本和轻微噪音
table(training$target)
t_yes = training[training$target==1,]
set.seed(123); t_SMOTE <-  SMOTE(training[,2:ncol(training)],training[1],dup_size = 1, K=5)$data  # K: 近邻数（默认5，建议3-10之间; dup_size = 1 表示每个阳性样本生成 1个 新样本（即阳性样本翻倍）
data1 = t_SMOTE[,c(ncol(t_SMOTE), 1:(ncol(t_SMOTE)-1))]; colnames(data1)[1] ="target"; table(data1$target)
data1 = data1 %>% filter(target==1)
training2 = rbind(training,t_yes[sample(1:nrow(t_yes),10),])
set.seed(123); data = rbind(training2, data1[sample(1:nrow(data1),table(training2$target)["0"]-table(training2$target)["1"]),]); table(data$target)
# 打乱顺序
set.seed(123); data = data[sample(1:nrow(data), nrow(data)),]
features <- freq2$features[c(freq2$Lasso>0 & freq2$RF>0 & freq2$RFERF>0 & freq2$RFESVM>0)]
# 临床指标加肽段
training_selected <- data[, c(features, "target")]
validation_selected <- validation[, c(features, "target")]
# train and evaluate models
for (model_name in names(models_list)) {
model_method <- models_list[[model_name]]
# train
if(model_name=="2ridge"){
ridge_grid <- expand.grid(alpha = 0,lambda = seq(0, 0.1, by = 0.01))
trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3), tuneGrid = ridge_grid)
}else{
if(model_name=="3lasso"){
trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))
}else{trained_model <- train(target ~ ., data = training_selected, method = model_method, trControl = trainControl(method = "cv", number = 3))}}
predictions_t <- predict(trained_model, training_selected[,-ncol(training_selected)])
predictions_v <- predict(trained_model, validation_selected[,-ncol(validation_selected)])
# calculate auc
auc_t <- roc(as.numeric(training_selected$target),as.numeric(predictions_t))[["auc"]]
auc_v <- roc(as.numeric(validation_selected$target),as.numeric(predictions_v))[["auc"]]
re = data.frame(predictions = c(predictions_t,predictions_v),
Actual =c(as.numeric(training_selected$target),as.numeric(validation_selected$target)),
predictions_type = c(rep("training", length(predictions_t)),rep("testing", length(predictions_v))),
AUC = c(rep(auc_t, length(predictions_t)),rep(auc_v, length(predictions_v)))) %>%
mutate(Fold=i, Model = model_name)
# save results
results <- rbind(results, re)
}
}
write.csv(results,"selecting classifier.csv", row.names = F)
results = read.csv("selecting classifier.csv")
table(results$predictions_type)
performance = NULL
results$method = paste(results$Fold, results$features,results$Model, sep="_")
table(results$method)
table(results$predictions)
for(i in unique(results$method)){for(n in c("training","testing")){
d = results %>% filter(method==i,predictions_type==n); table(d$method)
if(nrow(d)==0){next}else{
auc <- roc(as.numeric(d$Actual),as.numeric(d$predictions))[["auc"]]
m <- confusionMatrix(as.factor(d$predictions), as.factor(d$Actual))
re = cbind(as.data.frame(t(m[["overall"]])), as.data.frame(t(m[["byClass"]]))) %>% mutate(method=i, set=n, auc=auc)
performance = rbind(performance, re)
}
}
}
table(results$predictions)
perf = performance
perf$model = gsub(".*\\_","",perf$method)
perf$Fold = gsub("\\_.*","",perf$method)
names(perf)
write.csv(performance,"performance of 9 classifiers.csv", row.names = F)
########################################################
perf = data.table::fread("performance of 9 classifiers.csv")
perf$model = gsub(".*\\_","",perf$method)
perf$Fold = gsub("\\_.*","",perf$method)
names(perf)
p = reshape2::melt(perf,id.vars=c(19,20,22,23),
measure.vars=c("auc","Accuracy","F1","Sensitivity","Specificity","Pos Pred Value","Neg Pred Value"))
names(p)
p2 = p %>% group_by(model,set,variable) %>%
summarise(mean = mean(value), sd = sd(value))
ggplot(p2, aes(variable, mean, color=model, group=model, shape=model, lintype=model))+
geom_line()+
geom_point()+
scale_shape_manual(values = c(4,5,15,16,17,9,8,26,29,13,14))+
scale_color_manual(values = c("#f9a363","#3b4992","#3d7dae","#af322f","#8b7ec0","#8a4198","#725663","green4","black"))+
scale_linetype_manual(values = c(1,2,2,1,2,2,1,1,1))+
facet_wrap(.~set, ncol=3, scales = "free")+
theme_classic()+
scale_y_continuous(limits = c(0.5,1), expand = c(0.01,0.01))+
theme(axis.text.x = element_text(angle = 90),
strip.background = element_blank(),
axis.line = element_line(linewidth=.5, color="black"),
axis.ticks = element_line(linewidth=.5, color="black"),
axis.ticks.length = unit(1, "mm"))
ggsave("Fig. 5j.pdf", width = 7, height = 3.5)
